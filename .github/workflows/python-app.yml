name: Build and Release Tkinter GUI App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Allows creating releases and uploading assets

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            extension: ''
          - os: windows-latest
            platform: windows
            extension: '.exe'
          - os: macos-latest
            platform: macos
            extension: ''

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install customtkinter
        pip install watchdog
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --noicon --name file_collector_app-${{ matrix.platform }} main.py
        cp presets.json dist/presets.json

    # Package release for Windows
    - name: Package release (zip) on Windows
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path "dist\file_collector_app-${{ matrix.platform }}.exe","dist\presets.json" -DestinationPath "dist\file_collector_app-${{ matrix.platform }}.zip"

    # Package release for Linux and macOS
    - name: Package release (zip) on Unix
      if: runner.os != 'Windows'
      run: |
        cd dist
        zip file_collector_app-${{ matrix.platform }}.zip file_collector_app-${{ matrix.platform }}${{ matrix.extension }} presets.json

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.platform }}
        path: dist/file_collector_app-${{ matrix.platform }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download Linux Artifact
      uses: actions/download-artifact@v3
      with:
        name: build-linux
        path: artifacts/linux
    - name: Download Windows Artifact
      uses: actions/download-artifact@v3
      with:
        name: build-windows
        path: artifacts/windows
    - name: Download macOS Artifact
      uses: actions/download-artifact@v3
      with:
        name: build-macos
        path: artifacts/macos

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: "build-${{ github.run_number }}"
        release_name: "Automated Build ${{ github.run_number }}"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/linux/file_collector_app-linux.zip
        asset_name: file_collector_app-linux.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/windows/file_collector_app-windows.zip
        asset_name: file_collector_app-windows.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/macos/file_collector_app-macos.zip
        asset_name: file_collector_app-macos.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
